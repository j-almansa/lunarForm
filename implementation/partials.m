function [r,t,s,p,q] = partials(geogrid,resolution)
%

[latknots,lonknots] = size(geogrid);
nrobs = latknots*lonknots;

% Calculate Moon's ellipsoid
moonellipsoid = referenceEllipsoid;
moonellipsoid.SemimajorAxis = 1738000;% radius of Moon at Equator [m]
moonellipsoid.InverseFlattening = 3234.93; % inverse flattening


% Calculate lengths of 1 arcdegree along latitude per observation
%lat = meshgrid(89.5:-1:-89.5,1:lonknots);
lat = meshgrid(90-(resolution/2):-resolution:-(90-(resolution/2)),1:lonknots);
w = distance(lat(:),zeros(nrobs,1),lat(:),resolution*ones(nrobs,1),moonellipsoid);
[minw, idxminw] = min(w);
[maxw, idxmaxw] = max(w);
fprintf('Minimum cell width %g [m] at latitude %d\n',minw,fix((idxminw-1)/360)+1);
fprintf('Maximum cell width %g [m] at latitude %d\n',maxw,fix((idxmaxw-1)/360)+1);


Xmat = geogrid';
X = Xmat(:);

% Calculate coefficients of 2nd order Taylor expansion applying a 3x3 moving window
r = (circshift(X,  ( lonknots-1 ))+...
     circshift(X, -( 1          ))+...
     circshift(X, -( lonknots+1 ))+...
     circshift(X,  ( lonknots+1 ))+...
     circshift(X,  ( 1          ))+...
     circshift(X, -( lonknots-1 ))-...
     2*(circshift(X,  ( lonknots ))+...
        X                          +...
        circshift(X, -( lonknots )))) ./ (3*w.^2);
t = (circshift(X,  ( lonknots+1 ))+...
     circshift(X,  ( lonknots   ))+...
     circshift(X,  ( lonknots-1 ))+...
     circshift(X, -( lonknots-1 ))+...
     circshift(X, -( lonknots   ))+...
     circshift(X, -( lonknots+1 ))-...
     2*(circshift(X,  ( 1        ))+...
        X                          +...
        circshift(X, -( 1        )))) ./ (3*w.^2);
s = (circshift(X,  ( lonknots-1 ))+...
     circshift(X, -( lonknots-1 ))-...
     circshift(X,  ( lonknots+1 ))-...
     circshift(X, -( lonknots+1 ))) ./ (4*w.^2);
p = (circshift(X,  ( lonknots-1 ))+...
     circshift(X, -( 1          ))+...
     circshift(X, -( lonknots+1 ))-...
     circshift(X,  ( lonknots+1 ))-...
     circshift(X,  ( 1          ))-...
     circshift(X, -( lonknots-1 ))) ./ (6*w);
q = (circshift(X,  ( lonknots+1 ))+...
     circshift(X,  ( lonknots   ))+...
     circshift(X,  ( lonknots-1 ))-...
     circshift(X, -( lonknots-1 ))-...
     circshift(X, -( lonknots   ))-...
     circshift(X, -( lonknots+1 ))) ./ (6*w);

% Replace the borders of the grids with NaNs
r( [1:lonknots, ((0:(latknots-1))*lonknots)+1, (1:latknots)*lonknots, length(r)-(lonknots-1):end] ) = NaN;
t( [1:lonknots, ((0:(latknots-1))*lonknots)+1, (1:latknots)*lonknots, length(r)-(lonknots-1):end] ) = NaN;
s( [1:lonknots, ((0:(latknots-1))*lonknots)+1, (1:latknots)*lonknots, length(r)-(lonknots-1):end] ) = NaN;
p( [1:lonknots, ((0:(latknots-1))*lonknots)+1, (1:latknots)*lonknots, length(r)-(lonknots-1):end] ) = NaN;
q( [1:lonknots, ((0:(latknots-1))*lonknots)+1, (1:latknots)*lonknots, length(r)-(lonknots-1):end] ) = NaN;
